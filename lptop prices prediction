from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import cross_val_score

# Evaluate the model
y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
cross_val_score_mean = np.mean(cross_val_score(model, X_train_scaled, y_train, cv=10))

evaluation_metrics = {
    "R2 Score": r2,
    "Mean Absolute Error": mae,
    "Mean Squared Error": mse,
    "Cross Validation Score": cross_val_score_mean
}

print(evaluation_metrics)

# Example user input
user_input = {
    'Brand': 'Lenovo',
    'Processor_Speed': 3.01,
    'RAM_Size': 4,
    'Storage_Capacity': 256,
    'Weight': 2.94,
    'Screen_Size': 15.58
    # Include all other necessary features
}

# Convert user input to DataFrame
user_df = pd.DataFrame([user_input])

# Apply the same transformations to the user input
user_df = trf.transform(user_df)
user_df_scaled = scaler.transform(user_df)

# Predict the price
predicted_price = model.predict(user_df_scaled)[0]
print(f'Predicted Price: {predicted_price}')

# Calculate regression accuracy
tolerance = 0.1
accurate_predictions = np.abs((y_test - y_pred) / y_test) < tolerance
accuracy = np.mean(accurate_predictions)

evaluation_metrics["Accuracy"] = accuracy
print("Accuracy =",accuracy)
